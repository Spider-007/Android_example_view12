apply plugin: 'com.android.application'
//是否有配置文件
ext.hasProp = false
//发布目录
ext.appReleaseDir = ""
//发布日期
ext.appExportDate = null
//默认发布的versionCode
ext.appVersionCode = 1
//默认发布的versionName前缀
ext.appVersionName = "1.0."
ext.isDebug=false
ext.appCrrentTime=""
loadVersionCode()
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def file = output.outputFile
        //这里判断是否有配置文件，如果有则将将输出文件重定向到配置文件定义的位置
        if (hasProp) {
            def fileNameDebug
            if(isDebug){
                fileNameDebug = "DEBUG"
            }else{
                fileNameDebug = "RELEASE"
            }
            def fileName = fileNameDebug+"_${appVersionCode}.apk"
            def filePath = "${appReleaseDir}"
            output.outputFile = new File(filePath, fileName)
        }
    }
}

//File localPropertiesFile = project.file("BuildNumber.properties");
//if(localPropertiesFile.exists()) {
//    properties.load(localPropertiesFile.newDataInputStream())
//}
//def projectName = properties.getProperty("apk_update.appversionconde");

def loadVersionCode() {
    def File buildNumberFile = project.file("BuildNumber.properties");
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(buildNumberFile))
    def app_apk_is_debug = versionProps['APP_APK_IS_DEBUG'].toString()

    def apk_version_path = versionProps['APP_APK_FILE']

    if(app_apk_is_debug.equals("false")){
        ext.isDebug=false
        release(apk_version_path,buildNumberFile,versionProps);
    }else{
        ext.isDebug=true
        debug(apk_version_path,buildNumberFile,versionProps)
    }
}
def debug(String apk_version_path,File buildNumberFile,Properties versionProps){
    def apk_version_debug_one = versionProps['APK_VERSION_DEBUG_ONE'].toInteger()
    def apk_version_debug_two = versionProps['APK_VERSION_DEBUG_TWO'].toInteger()
    def apk_version_debug_three = versionProps['APK_VERSION_DEBUG_THREE'].toInteger()

    def crrentTime = getTime()
    if (buildNumberFile.exists()) {
        ext.apk_version_debug_three = apk_version_debug_three + 1
        apk_version_debug_three = ext.apk_version_debug_three
    }
    def version = apk_version_debug_one+"."+apk_version_debug_two+"."+apk_version_debug_three

    versionProps['APK_VERSION_DEBUG_THREE']=apk_version_debug_three.toString()   //将自增长ID写入文件中
    versionProps.store(buildNumberFile.newWriter(), null)

    ext.appReleaseDir = apk_version_path
    ext.appVersionName = version
    ext.appCrrentTime = crrentTime
    ext.appVersionCode = (apk_version_debug_one+""+apk_version_debug_two+""+apk_version_debug_three).toInteger()
}


def release(String apk_version_path,File buildNumberFile,Properties versionProps){



    def apk_version_one = versionProps['APP_VERSION_NAME_ONE'].toInteger()
    def apk_version_two = versionProps['APP_VERSION_NAME_TWO'].toInteger()
    def apk_version_three = versionProps['APK_VERSION_NAME_THREE'].toInteger()
    def apk_version_code = versionProps['APP_VERSION_CODE_NUMBER'].toInteger()
    def env_type = versionProps['ENV_TYPE'].toInteger()
    def crrentTime = getTime()


    if (buildNumberFile.exists()) {
        ext.appVersionCode = apk_version_code + 1
        apk_version_code = ext.appVersionCode
    }
    def currentVersionCode = ""
    def version = ""
    def tempCode = (apk_version_code + "").length()
    if(tempCode == 1){
        currentVersionCode = apk_version_one + "" + apk_version_two + "" + apk_version_three +env_type+"00"+ apk_version_code
        version = apk_version_one + "." + apk_version_two + "." + apk_version_three +"."+env_type+"00"+ apk_version_code
    }else if(tempCode == 2){
        currentVersionCode = apk_version_one + "" + apk_version_two + "" + apk_version_three +env_type+"0"+ apk_version_code
        version = apk_version_one + "." + apk_version_two + "." + apk_version_three +"."+env_type+"0"+ apk_version_code
    }else if(tempCode == 3){
        currentVersionCode = apk_version_one + "" + apk_version_two + "" + apk_version_three +env_type+ apk_version_code
        version = apk_version_one + "." + apk_version_two + "." + apk_version_three +"."+env_type+ apk_version_code
    }else{
        currentVersionCode = apk_version_one + "" + apk_version_two + "" + apk_version_three +env_type+""+ apk_version_code
        version = apk_version_one + "." + apk_version_two + "." + apk_version_three +"."+ env_type+apk_version_code
    }

    versionProps['APP_VERSION_CODE_NUMBER']=apk_version_code.toString()   //将自增长ID写入文件中
    versionProps.store(buildNumberFile.newWriter(), null)
//    print(apk_version_path)
    ext.appReleaseDir = apk_version_path
    ext.appVersionName = version
    ext.appCrrentTime = crrentTime
    ext.appVersionCode = (currentVersionCode).toInteger()

}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHH')
    return formattedDate
}
//获取日期

def getTime() {
    def date = new Date()
    def formattedDate = date.format('MMddHH')
    return formattedDate
}


android {
    compileSdkVersion 23
    buildToolsVersion '26.0.3'

    defaultConfig {
        applicationId 'com.htmitech.emportal'
        minSdkVersion 16
        targetSdkVersion 23
        multiDexEnabled true   // Enabling multidex support.
        versionCode appVersionCode
        versionName appVersionName
        ndk{
            abiFilters 'armeabi'
        }
    }

    signingConfigs {
        releaseConfig {
            storeFile file("EMPortalPackage.key")
            storePassword "htmitechemportal"
            keyAlias "htmitech"
            keyPassword "htmitechemportal"
        }
    }
    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "5g"
        preDexLibraries false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
            applicationIdSuffix ".ggpt"
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/BCKEY.SF'
        exclude 'META-INF/BCKEY.DSA'
        exclude 'META-INF/MANIFEST.MF'
    }
    sourceSets {

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    productFlavors {
    }
    useLibrary 'org.apache.http.legacy'
}
repositories {
    flatDir {
        dirs '../ComponentLibrary/libs'
    }
}

dependencies {
    compile files('libs/umeng-update-v2.6.0.1.jar')
    compile files('libs/gson-1.7.1.jar')
    compile files('libs/eventbus.jar')
    compile files('libs/android-async-http-1.4.6.jar')
    compile files('libs/clftool.jar')
    compile files('libs/universal-image-loader-1.9.3-with-sources.jar')
    compile files('libs/umeng-analytics-v5.2.4.jar')
    compile files('libs/bugly_crash_release__2.1.1.jar')
    compile project(':AddressBook')
    compile('com.jakewharton:butterknife:5.1.1') {
        exclude module: 'support-compat'
        exclude module: 'support-v4'
    }
    compile 'com.android.support:multidex:1.0.0'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.7'
    compile files('libs/Volley.jar')
    compile project(':ArchiverModule')
    compile project(':schedulemanagerlibrary')
    compile project(':updownloadmanagement')
    compile project(':ZTCustom')
}
