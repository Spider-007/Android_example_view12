cordova.define("com.minxing.kit.plugin.web.wifiwizard.WifiWizard",function(i,t,e){/*
 * Copyright 2015 Matt Parsons
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var n=(i("cordova/argscheck"),i("cordova/channel"),i("cordova/utils"),i("cordova/exec"),i("cordova/platform"),i("cordova")),o={formatWifiConfig:function(i,t,e){var n={SSID:o.formatWifiString(i)};if(e||t)if("WPA"===e)n.auth={algorithm:e,password:o.formatWifiString(t)};else{if("New network type"!==e)return console.log("Algorithm incorrect"),!1;n.auth={algorithm:e}}else n.auth={algorithm:"NONE"};return n},formatWPAConfig:function(i,t){return o.formatWifiConfig(i,t,"WPA")},formatWifiString:function(i){return i!==undefined&&null!==i||(i=""),i=i.trim(),'"'!=i.charAt(0)&&(i='"'+i),'"'!=i.charAt(i.length-1)&&(i+='"'),i},addNetwork:function(i,t,e){null!==i&&"object"==typeof i||console.log("WifiWizard: Invalid parameter. wifi not an object.");var o=[];if(i.SSID===undefined||""===i.SSID)return console.log("WifiWizard: No SSID given."),!1;if(o.push(i.SSID),"object"!=typeof i.auth)return console.log("WifiWizard: No authentication algorithm given."),!1;switch(i.auth.algorithm){case"WPA":o.push("WPA"),o.push(i.auth.password);break;case"NONE":o.push("NONE");break;case"Newly supported type":break;default:console.log("WifiWizard: authentication invalid.")}n.exec(t,e,"WifiWizard","addNetwork",o)},removeNetwork:function(i,t,e){n.exec(t,e,"WifiWizard","removeNetwork",[o.formatWifiString(i)])},connectNetwork:function(i,t,e){n.exec(t,e,"WifiWizard","connectNetwork",[o.formatWifiString(i)])},disconnectNetwork:function(i,t,e){n.exec(t,e,"WifiWizard","disconnectNetwork",[o.formatWifiString(i)])},listNetworks:function(i,t){if("function"!=typeof i)return void console.log("listNetworks first parameter must be a function to handle list.");n.exec(i,t,"WifiWizard","listNetworks",[])},getScanResults:function(i,t,e){if("function"==typeof i&&(e=t,t=i,i={}),"function"!=typeof t)return void console.log("getScanResults first parameter must be a function to handle list.");n.exec(t,e,"WifiWizard","getScanResults",[i])},startScan:function(i,t){if("function"!=typeof i)return void console.log("startScan first parameter must be a function to handle list.");n.exec(i,t,"WifiWizard","startScan",[])},disconnect:function(i,t){if("function"!=typeof i)return void console.log("disconnect first parameter must be a function to handle list.");n.exec(i,t,"WifiWizard","disconnect",[])},getCurrentSSID:function(i,t){if("function"!=typeof i)return void console.log("getCurrentSSID first parameter must be a function to handle SSID.");n.exec(i,t,"WifiWizard","getConnectedSSID",[])},getCurrentBSSID:function(i,t){if("function"!=typeof i)return void console.log("getCurrentSSID first parameter must be a function to handle SSID.");n.exec(i,t,"WifiWizard","getConnectedBSSID",[])},isWifiEnabled:function(i,t){if("function"!=typeof i)return void console.log("isWifiEnabled first parameter must be a function to handle wifi status.");n.exec(function(t){i("1"==t)},t,"WifiWizard","isWifiEnabled",[])},setWifiEnabled:function(i,t,e){if("function"!=typeof t)return void console.log("setWifiEnabled second parameter must be a function to handle enable result.");n.exec(t,e,"WifiWizard","setWifiEnabled",[i])}};e.exports=o});